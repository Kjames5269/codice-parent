# Description:
#   Listens for github webhook notifications of PRs and triggers Bamboo builds.
#
# Dependencies:
#   "url":
#   "querystring":
#
# Configuration:
#   bamboo_user
#   bamboo_pass
#   github_api_token
#
# Commands:
#   Listens for Pull Request notifications from Webhook

url          = require('url')
query_string = require('querystring')
action_types = ['opened', 'synchronize', 'reopened']
event_types  = ['pull_request']

bamboo_user  = process.env.bamboo_user
bamboo_pass  = process.env.bamboo_pass
github_api_token = process.env.github_api_token

root_pr_plan = "DDFPR-ROOT"
distro_pr_plan = "DDFPR-DIS"
module_pr_plan = "DDFPR-MOD"

module.exports = (robot) ->
  robot.router.post "/hubot/trigger-bamboo", (req, res) ->

    console.log "---"
    console.log "Request received: #{req.url}"

    # Extract Bamboo plan variables from query url
    query      = query_string.parse(url.parse(req.url).query)
    bamboo_url = query.bamboo
    if !bamboo_url?
      console.log "Bad request. Missing parameters in query string"
      res.writeHead 400
      res.end "Missing parameters in query string\n"
      return

    # Extract pull request info from webhook headers and payload
    payload     = req.body
    action_type = payload.action
    event_type  = req.headers["x-github-event"]

    try
      if event_type in event_types && action_type in action_types
        # Determine which modules have modified files and trigger the appropriate PR build
        # Cases:
        #   1. Files change in the root
        #     - trigger ROOT (full repo) PR build
        #   2. Files change in multiple submodules
        #     - trigger ROOT (full repo) PR build
        #   3. Files change in only the distribution module
        #     - trigger the DISTRO PR build
        #   4. Files change in only one submodule that is not distribution (e.g. platform)
        #     - trigger MODULE PR build
        # The MODULE PR build will take a parameter that indicates the submodule to build
        # and includes distro + integration tasks.
        # The ROOT PR build builds from the reactor root with one maven task.
        # The DISTRO PR build builds the distro + integration tests with separate tasks.

        repoDeltas = (base_url, pr_num, callback) ->
          robot.http(base_url + "/pulls/" + pr_num + "/files")
            .header('Authorization', "token #{github_api_token}")
            .get() (err, res, body) ->
              if err
                console.log "Encountered an error: #{err}"
              else
                files_body = JSON.parse body
                files = (obj.filename.split("/") for obj in files_body)

                root_delta = files.some((el) -> el.length == 1)
                removeDuplicateSubmodulesExcludeDistro = (acc, val) ->
                  if val.length > 1 and val[0] not in acc and val[0] != "distribution"
                    acc.concat(val[0])
                  else
                    acc
                directories = files.reduce(removeDuplicateSubmodulesExcludeDistro, [])
                console.log "Submodules to build - " + directories.toString()

                if root_delta or directories.length > 1
                  callback(root_pr_plan)
                else if directories.length == 0
                  callback(distro_pr_plan)
                else
                  callback(module_pr_plan, directories[0])

        # Webhook was generated by valid pull request. Attempt to queue Bamboo PR build
        console.log "Processing #{event_type} event in repo #{payload.pull_request.html_url}. Action: #{action_type}"
        bamboo_post = (build_plan, submodule) ->
          bamboo_query = "#{bamboo_url}/rest/api/latest/queue/#{build_plan}?" +
            "bamboo.variable.pull_ref=#{payload.pull_request.head.ref}&" +
            "bamboo.variable.pull_sha=#{payload.pull_request.head.sha}&" +
            "bamboo.variable.pull_num=#{payload.number}&" +
            "bamboo.variable.git_repo_url=#{payload.repository.clone_url}"
          if (submodule?)
            bamboo_query = bamboo_query + "&bamboo.variable.submodule=#{submodule}"

          robot.http(bamboo_query)
            .auth(bamboo_user, bamboo_pass)
            .header('Accept', 'application/json')
            .post() (err, res, body) ->
              if err
                console.log "Encountered an error :( #{err}"
              else
                json_body = JSON.parse body

                # Determine whether build was successfully queued and update GitHub PR status accordingly
                if !json_body.hasOwnProperty("status-code")
                  robot.http(payload.pull_request.statuses_url)
                    .header('Authorization', "token #{github_api_token}")
                    .post('{"state": "pending", "context": "bamboo", "description": "A Bamboo build has been queued", "target_url": "' +
                          "#{bamboo_url}/browse/#{json_body.buildResultKey}\"}")
                else
                  console.log body
                  robot.http(payload.pull_request.statuses_url)
                    .header('Authorization', "token #{github_api_token}")
                    .post('{"state": "failure", "context": "bamboo", "description": "' + "#{json_body.message}" + '", "target_url": "' +
                          "#{bamboo_url}/browse/#{build_plan}\"}")

        repoDeltas(payload.repository.url, payload.number, bamboo_post)


      else if event_type not in event_types
        console.log "Ignoring #{event_type} event in repo #{payload.pull_request.html_url}. Only pull_request events are handled"
      else
        console.log "Pull request #{payload.pull_request.html_url} was #{action_type}. Ignoring event as no code changes were made"
    catch error
      console.log "#{error}. Request: #{req.body}"

    res.end "okay"
